@test module;

import main.*;

val user = rell.test.pubkeys.alice;
val page = rell.test.pubkeys.bob;

// function test_create_entities() {
//     // Test the creation of two users: Alice and Bob
//     rell.test.tx()
//         .op(create_user("Alice", user))
//         .op(create_user("Bob", page))
//         .op(create_page("CCC", "MemeCoin", page))
//         .run();

//     // Check if there are two users in the user table
//     assert_equals(user @ { } (@sum 1), 2);
//     assert_equals(page @ { } (@sum 1), 1);

//     // Alice follows Bob and makes a post
//     rell.test.tx()
//         .op(follow_page(user, page))
//         .op(make_post(page, "My post"))
//         .run();

//     // Check if there is one follower and one post
//     assert_equals(follower @ { } (@sum 1), 1);
//     assert_equals(post @ { } (@sum 1), 1);

//     // Alice unfollows Bob and no followers should now exist
//         rell.test.tx()
//         .op(unfollow_page(user, page))
//         .run();
//     assert_equals(follower @ { } (@sum 1), 0);
// }

// function test_user_name() {
//     rell.test.tx()
//         .op(create_user("Alice", user))
//         .run();
//     assert_equals(get_user_name(user), "Alice#02466");
//     val users_result = get_users(0, 20);
//     assert_equals(users_result.pointer, 1);
//     assert_equals(users_result.users.size(), 1);
//     assert_true(users_result.users @* {} (.name).contains("Alice#02466"));
// }

val charlie = rell.test.pubkeys.charlie;
val alice = rell.test.pubkeys.alice;
val bob = rell.test.pubkeys.bob;

// function test_follower_calculation() {
//     rell.test.tx()
//         .op(create_user("Alice", alice))
//         .op(create_page("Bob", "dora", bob))
//         .op(create_page("Charlie","ssr", charlie))
//         .run();

//     rell.test.tx()
//         .op(follow_page(alice, bob))
//         .op(follow_page(alice, charlie))
//         .run();

//     assert_true(is_following(alice, bob));
//     assert_true(is_following(alice, charlie));
//     assert_equals(get_following_count(alice), 2);

//     assert_equals(get_followers_count(bob), 1);
// }

// function test_pagination_of_posts() {
//     rell.test.tx()
//         .op(create_user("Alice", alice))
//         .op(create_page("Bob","BBB", bob))
//         .run();
//     rell.test.tx().op(follow_page(alice, bob)).run();

//     for (i in range(5)) {
//         rell.test.tx().op(make_post(bob, "Content %d".format(i))).run();
//     }

//     val initial_posts = get_posts(alice, 0, 4);
//     assert_equals(initial_posts.pointer, 4);
//     assert_equals(initial_posts.posts.size(), 4);
//     val last_posts = get_posts(alice, initial_posts.pointer, 4);
//     assert_equals(last_posts.pointer, 5);
//     assert_equals(last_posts.posts.size(), 1);
// }

val alice_kp = rell.test.keypairs.alice; 
val bob_kp = rell.test.keypairs.bob; 

function test_create_entities_with_sig() {
    rell.test.tx()
        .op(create_user("Alice", alice))
        .op(create_page("Bob","BBB", bob))
        .run();
    assert_equals(user @ { } (@sum 1), 1);
    assert_equals(page @ { } (@sum 1), 1);
    rell.test.tx()
        .op(follow_page(alice, bob))
        .op(make_post(bob, "My post"))
        .sign(alice_kp, bob_kp)                  
        .run();
    assert_true(is_following(alice, bob));
    assert_equals(follower @ { } (@sum 1), 1);
    assert_equals(post @ { } (@sum 1), 1);
    rell.test.tx()
        .op(unfollow_page(alice, bob))
        .sign(alice_kp)                  
        .run();
    assert_false(is_following(alice, bob));
    assert_equals(follower @ { } (@sum 1), 0);
}