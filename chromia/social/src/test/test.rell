@test module;

import main.*;

val user = rell.test.pubkeys.alice;
val page = rell.test.pubkeys.bob;

function test_create_entities() {
    // Test the creation of two users: Alice and Bob
    rell.test.tx()
        .op(create_user("Alice", user))
        .op(create_user("Bob", page))
        .op(create_page("CCC", "MemeCoin", page))
        .run();

    // Check if there are two users in the user table
    assert_equals(user @ { } (@sum 1), 2);
    assert_equals(page @ { } (@sum 1), 1);

    // Alice follows Bob and makes a post
    rell.test.tx()
        .op(follow_user(user, page))
        .op(make_post(page, "My post"))
        .run();

    // Check if there is one follower and one post
    assert_equals(follower @ { } (@sum 1), 1);
    assert_equals(post @ { } (@sum 1), 1);

    // Alice unfollows Bob and no followers should now exist
        rell.test.tx()
        .op(unfollow_user(user, page))
        .run();
    assert_equals(follower @ { } (@sum 1), 0);
}

function test_user_name() {
    rell.test.tx()
        .op(create_user("Alice", user))
        .run();
    assert_equals(get_user_name(user), "Alice#02466");
    val users_result = get_users(0, 20);
    assert_equals(users_result.pointer, 1);
    assert_equals(users_result.users.size(), 1);
    assert_true(users_result.users @* {} (.name).contains("Alice#02466"));
}

val charlie = rell.test.pubkeys.charlie;
val alice = rell.test.pubkeys.alice;
val bob = rell.test.pubkeys.bob;

function test_follower_calculation() {
    rell.test.tx()
        .op(create_user("Alice", alice))
        .op(create_page("Bob", "dora", bob))
        .op(create_page("Charlie","ssr", charlie))
        .run();

    rell.test.tx()
        .op(follow_user(alice, bob))
        .op(follow_user(alice, charlie))
        .run();

    assert_true(is_following(alice, bob));
    assert_true(is_following(alice, charlie));
    assert_equals(get_following_count(alice), 2);

    assert_equals(get_followers_count(bob), 1);
}