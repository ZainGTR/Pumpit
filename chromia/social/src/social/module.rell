module;
import lib.ft4.core.accounts.{ account, single_sig_auth_descriptor, create_account_with_auth };
import lib.ft4.auth;


@extend(auth.auth_handler)
function () = auth.add_auth_handler(
  flags = ["MySession"]
);

entity token {
  key ticker: name;
  key address: text;
  index dev: byte_array;
  created: timestamp = op_context.last_block_time;
}

// todo achievements
entity user {
  key id: byte_array;
  key name;
  key account;
  joined:timestamp = op_context.last_block_time;
}

entity page {
  key id: byte_array;
  key token;
  index owner: user;
  created:timestamp = op_context.last_block_time;
}


entity follower {
  index page;
  index follower: user;
  key page, follower;
}

entity post {
  key id: byte_array;
  index page;
  mutable media:text;
  mutable upvotes:integer = 0;
  mutable downvotes:integer = 0;
  mutable views:integer = 0;
  mutable content: text;
  created:timestamp = op_context.last_block_time;
}

entity reply {
  key id: byte_array;
  index parent_id: byte_array;
  post:boolean;
  index writer: user;
  mutable upvotes:integer = 0;
  mutable downvotes:integer = 0;
  mutable views:integer = 0;
  mutable content: text;
  created:timestamp = op_context.last_block_time;
}


operation create_page() {
    val account = auth.authenticate();
    val user = user @ { account };
    val token = token @ { account.id };
    val id = (token.address).hash();
    create page(id = id, token = token, owner = user, created = op_context.last_block_time);
}

operation make_reply(content: text, parent_id:byte_array, post:boolean) {
    val account = auth.authenticate();
    require(content.size() <= 160, "A reply cannot be longer than 160 letters");
    val user = user @ { account };
    val id  = (content, account.id, parent_id).hash();
    create reply(
        id = id, parent_id = parent_id, post = post, writer = user, content = content, created = op_context.last_block_time
    );
}

operation make_post(page_id:byte_array, content: text, media:text) {
    val account = auth.authenticate();
    val user = user @ { account };
    val page = page @ { .id == page_id, .owner == user };
    require(content.size() <= 255, "A post cannot be longer than 255 letters");
    val id = (content, page_id, account.id).hash();
    create post(
        id = id, page = page, media = media, content = content, created = op_context.last_block_time
    );
}

operation follow_page(page_id: byte_array) {
    val account = auth.authenticate();
    val user = user @ { account };
    val page = require_page(page_id);
    create follower(
        page = page,
        follower = user
    );
}

operation unfollow_page(page_id: byte_array) {
    val account = auth.authenticate();
    val user = user @ { account };
    val unfollow = require_page(page_id);
    delete follower @? { .page == unfollow, .follower == user };
}

query get_user_name(user_id: byte_array): text {
  return format_user(require_user(user_id));
}

query get_followers_count(page_id: pubkey): integer {
  return follower @ { .page == require_page(page_id) } ( @sum 1 );
}

query get_following_count(user_id: byte_array): integer {
  return follower @ { .follower == require_user(user_id) } (@sum 1);
}

query is_following(my_id: byte_array, page_id: byte_array) =
  exists(follower @? { .page.id == page_id, .follower.id == my_id });


struct post_dto {
  timestamp;
  user: struct<page>;
  content: text;
}


query get_posts(
  user_id: byte_array,
  pointer: integer,
  n_posts: integer
): (pointer: integer, posts: list<post_dto>) {
  val posts = (user, follower, post) @* {
    user.id == user_id,
    follower.follower == user,
    post.page == follower.page
  } (
    @sort_desc @omit post.rowid,
    post_dto(
        post.created,
        post.content,
        user = post.page.to_struct()
    )
  ) offset pointer limit n_posts;

  return (
    pointer = pointer + posts.size(),
    posts = posts
  );
}


query get_users(pointer: integer, n_users: integer) {
  val users = user @* {} (name = format_user($), id = .id) offset pointer limit n_users;
  return (
    pointer = pointer + users.size(),
    users = users
  );
}


function require_is_signer(pubkey) = require(op_context.is_signer(pubkey), "User must sign this operation");
function require_user(id: byte_array) = require(user @? { id }, "User with id %b does not exist".format(id));
function require_page(id: byte_array) = require(page @? { id }, "Page with id %b does not exist".format(id));
function format_user(user) = "%s#%s".format(user.name, user.id.to_hex().sub(0, 5));